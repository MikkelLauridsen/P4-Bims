#-------------------------------------------------------------------
#AST types
#-------------------------------------------------------------------

type NumeralNode = {
    | NumeralNode String
}

type VarNode = {
    | VarNode String
}

type BoolExprNode = {
    | ComparisonNode (ArithExprNode, ArithExprNode)
    | LessThanNode (ArithExprNode, ArithExprNode)
    | GreaterThanNode (ArithExprNode, ArithExprNode)
    | NotNode BoolExprNode
    | AndNode (BoolExprNode, BoolExprNode)
    | OrNode (BoolExprNode, BoolExprNode)
    | BoolParenNode BoolExprNode
}

type ArithExprNode = {
    | NumExprNode NumeralNode
    | VarExprNode VarNode
    | AddExprNode (ArithExprNode, ArithExprNode)
    | MultExprNode (ArithExprNode, ArithExprNode)
    | SubExprNode (ArithExprNode, ArithExprNode)
    | ArithParenNode ArithExprNode
}

type StatementNode = {
    | AssignmentNode (VarNode, ArithExprNode)
    | SkipNode
    | CompositeNode (StatementNode, StatementNode)
    | IfNode (BoolExprNode, StatementNode, StatementNode)
    | WhileNode (BoolExprNode, StatementNode)
    | PrintNode ArithExprNode
}

#-------------------------------------------------------------------
#JVM types
#-------------------------------------------------------------------
#todo: UInt8, UInt16, UInt32, PoolIndex,

#https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.1
type ClassFile = { 
    | ClassFile (
        [UInt8],         #magicNumber
        UInt16,          #versionMinor
        UInt16,          #versionMajor
        [PoolConstant],  #constantPool
        UInt16,          #accessFlags
        PoolIndex,       #thisClass
        PoolIndex,       #superClass
        [PoolIndex],     #interfaces
        [FieldInfo],     #fields
        [MethodInfo],    #methods
        [AttributeInfo]  #attributes
    )
}

#https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4
type PoolConstant = { 
    | StringConstant String
    | IntegerConstant UInt32
    | ClassRef PoolIndex
    | StringRef PoolIndex
    | FieldRef (PoolIndex, PoolIndex)
    | MethodRef (PoolIndex, PoolIndex)
    | NameAndType (PoolIndex, PoolIndex)
}

#https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.5
type FieldInfo = {
    | FieldInfo (
        UInt16,          #access flags
        PoolIndex,       #name
        PoolIndex,       #descriptor
        [AttributeInfo]  #attributes
    )
}

#https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.6
type MethodInfo = { 
    | MethodInfo (
        UInt16,          #access flags
        PoolIndex,       #name
        PoolIndex,       #descriptor
        [AttributeInfo]  #attributes
    )
}

#https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.3
type ExceptionInfo = {
    | ExceptionInfo (
        UInt16, #start pc
        UInt16, #end pc
        UInt16, #handler pc
        UInt16  #catch type
    )
}

#https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7
#https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.3
type AttributeInfo = {
    | AttributeInfo (
        PoolIndex,       #name
        [UInt8]          #info
    )
    | CodeAttributeInfo (
        PoolIndex,       #name
        UInt16,          #maxStack
        UInt16,          #maxLocals
        [UInt8],         #code
        [ExceptionInfo], #exceptions
        [AttributeInfo]  #attributes
    )
}

type JVMInstruction = {
    | JVMiconst_0             #0x03
    | JVMiconst_1             #0x04
    | JVMldc UInt8            #0x12
    | JVMldc_w UInt16         #0x12
    | JVMiload UInt8          #0x15
    | JVMaload_0              #0x2a
    | JVMistore UInt8         #0x36
    | JVMiadd                 #0x60
    | JVMisub                 #0x64
    | JVMimul                 #0x68
    | JVMif_icmpeq Int16      #0x9f
    | JVMif_icmpne Int16      #0xa0
    | JVMif_icmplt Int16      #0xa1
    | JVMif_icmpgt Int16      #0xa3
    | JVMgoto Int16           #0xa7
    | JVMreturn               #0xb1
    | JVMgetstatic UInt16     #0xb2
    | JVMinvokevirtual UInt16 #0xb6
    | JVMinvokespecial UInt16 #0xb7
}
    
#-------------------------------------------------------------------
#Utility functions
#-------------------------------------------------------------------

var writes::(String -> (File* -> (Bool, File*))) = s => {
    f => {
        match s {
            | []     -> (true, f)
            | (c:cs) -> 
                let (succ, f') = write c f 
                in (case {
                    | succ == true -> (writes cs f')
                    | ?            -> (false, f') 
                })
        }
    }
}

var length::([a] -> Int) = l => {
    match l {
        | []     -> 0
        | (c:cs) -> 1 + length cs
    }
}

var map::((a -> b) -> ([a] -> [b])) = fun => {
    lst => {
        match lst {
            | [] -> []
            | (x:xs) -> ((fun x) : (map fun xs))
        }
    }
}

var concat::([[a]] -> [a]) = lst => {
    match lst {
        | [] -> []
        | (x:xs) -> x ++ (concat xs) 
    }
}

#-------------------------------------------------------------------
#JVM
#-------------------------------------------------------------------

#todo convert to char
var getByte::(Int -> (Int -> Char)) = b => {
    num => {
        i2c (num b>> (8 * b) b& 255)
    }
}

var getBytes::(Int -> (Int -> [Char])) = c => {
    num => {
        case {
            | c == 0 -> []
            | ? -> (getByte (c - 1) num : getBytes (c - 1) num)
        }
    }
}

var uint8ToBytes::(Int -> [Char]) = getBytes 1
var uint16ToBytes::(Int -> [Char]) = getBytes 2
var uint32ToBytes::(Int -> [Char]) = getBytes 4

var int16ToBytes = uint16ToBytes

var tableToBytes = f => {
    l => { concat (map f l) }
}

var poolConstantToBytes::(PoolConstant -> [Char]) = pc => {
    match pc {
        | StringConstant str     -> uint8ToBytes 1 ++ uint16ToBytes (length str) ++ str
        | IntegerConstant i      -> uint8ToBytes 3 ++ uint32ToBytes i
        | ClassRef si            -> uint8ToBytes 7 ++ uint16ToBytes si
        | StringRef si           -> uint8ToBytes 8 ++ uint16ToBytes si
        | FieldRef (c, ntd)      -> uint8ToBytes 9 ++ uint16ToBytes c ++ uint16ToBytes ntd
        | MethodRef (c, ntd)     -> uint8ToBytes 10 ++ uint16ToBytes c ++ uint16ToBytes ntd
        | NameAndType (nsi, tdi) -> uint8ToBytes 12 ++ uint16ToBytes nsi ++ uint16ToBytes tdi
    }
}

#todo last
var fieldToBytes::(FieldInfo -> [Char]) = field => {
    []
}


var methodToBytes::(MethodInfo -> [Char]) = method => {
    match method {
        | MethodInfo (accessFlags, name, descriptor, attributes) ->
            uint16ToBytes accessFlags ++
            uint16ToBytes name ++
            uint16ToBytes descriptor ++
            uint16ToBytes (length attributes) ++
            tableToBytes attributeToBytes attributes
    }
}

#todo
var attributeToBytes::(AttributeInfo -> [Char]) = attribute => {
    match attribute {
        | AttributeInfo (name, info) -> [] #todo last
        | CodeAttributeInfo (name, maxStack, maxLocals, code, exceptions, attributes) -> 
            []
    }
}

#todo
var exceptionToBytes::(ExceptionInfo -> [Char]) = exception => {
    []
}

#todo
var getClassBytes::(ClassFile -> [Char]) = class => {
    []
}

#todo
var getInstructionBytes = ins => {
    match ins {
        | JVMiconst_0        -> [0x03]
        | JVMiconst_1        -> [0x04]
        | JVMldc i           -> [0x12]
        | JVMldc_w i         -> [0x13]
        | JVMiload i         -> [0x15]
        | JVMaload_0         -> [0x2a]
        | JVMistore i        -> [0x36]
        | JVMiadd            -> [0x60]
        | JVMisub            -> [0x64]
        | JVMimul            -> [0x68]
        | JVMif_icmpeq b     -> [0x9f]
        | JVMif_icmpne b     -> [0xa0]
        | JVMif_icmplt b     -> [0xa1]
        | JVMif_icmpgt b     -> [0xa3]
        | JVMgoto b          -> [0xa7]
        | JVMreturn          -> [0xb1]
        | JVMgetstatic i     -> [0xb2]
        | JVMinvokevirtual i -> [0xb6]
        | JVMinvokespecial i -> [0xb7]
    }
}

var getCodeBytes = ins => {
    concat (map getInstructionBytes ins)
}

#-------------------------------------------------------------------
#Codegen
#-------------------------------------------------------------------

#todo
var getConstantIndex::(NumeralNode -> (EnvC -> (UInt16, EnvC))) = num => {
    cPool => {
        0
    }
}

#todo
var getVarIndex::(VarNode -> (EnvV -> (UInt16, EnvC))) = num => {
    cPool => {
        0
    }
}

var initialConstantPool = [
    # 1
    MethodRef 5 12,
    FieldRef 13 14,
    MethodRef 15 16,
    ClassRef 17,
    ClassRef 18,
    # 6
    StringConstant "<init>",
    StringConstant "()V",
    StringConstant "Code",
    StringConstant "main",
    StringConstant "([Ljava/lang/String;)V",
    #11
    StringConstant "Main.java",
    NameAndType 6 7,
    ClassRef 19,
    NameAndType 20 21,
    ClassRef 22,
    #16
    NameAndType 23 24,
    StringConstant "Main",
    StringConstant "java/lang/Object",
    StringConstant "java/lang/System",
    StringConstant "out",
    #21
    StringConstant "Ljava/io/PrintStream;",
    StringConstant "java/io/PrintStream",
    StringConstant "println",
    StringConstant "(I)V"
]

var printConstantIndex = 3

var initInstructions = [
    JVMaload_0,
    JVMinvokespecial 1,
    JVMreturn
]

#todo
var initialEnvV = 0
var initialEnvJ = 0

var generateClassFile = ast => {
    0
}

#todo
var updateJVM = s => {
    l => {
        envJ => {
            updateJVME s l 0 envJ
        }
    }
}

#todo
var updateJVME = s => {
    l => {
        c => {
            envJ => {
                0
            }
        }
    }
}

#todo
var genCodeStatement = node => {
    envV => {
        envJ => {
            match node {
                | AssignmentNode (v, a)  -> 0
                | SkipNode               -> 0
                | CompositeNode (s1, s2) -> 0
                | IfNode (b, s1, s2)     -> 0
                | WhileNode (b, s)       -> 0
                | PrintNode (a)          -> 0
            }
        }
    }
}

#todo
var genCodeBoolExpr = node => {
    envV => {
        envJ => {
            match node {
                | ComparisonNode (a1, a2)  -> 0
                | LessThanNode (a1, a2)    -> 0
                | GreaterThanNode (a1, a2) -> 0
                | NotNode b                -> 0
                | AndNode (b1, b2)         -> 0
                | OrNode (b1, b2)          -> 0
                | BoolParenNode a          -> 0
            }
        }
    }
}

#todo
var genCodeArithExpr = node => {
    envV => {
        envJ => {
            match node {
                | NumExprNode n         -> 0
                | VarExprNode v         -> 0
                | AddExprNode (a1, a2)  -> 0
                | SubExprNode (a1, a2)  -> 0
                | MultExprNode (a1, a2) -> 0
                | ArithParenNode a      -> 0
            }
        }
    }
}

#https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.6
#type MethodInfo = { 
#    | MethodInfo (
#        UInt16,          #access flags
#        PoolIndex,       #name
#        PoolIndex,       #descriptor
#        [AttributeInfo]  #attributes
#    )
#}

var count = i => {
    case {
        | i == 256 -> []
        | ? -> (i2c i : count (i + 1))
    }
}

#test stuff
var bytes = count 0

var bytesback = map c2i bytes

var temp = MethodInfo (
    1100,
    1,
    2,
    []
)

var content = bytes

var main = sys => {
    let (status, sys2, file') = open_write sys "test" in (
        let (status', file) = (writes content file') in (
            close sys2 file
        )
    )
}